package inventory.management.system;
/**
 *
 * @author Bhavana
 */
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVRecord;
import com.opencsv.CSVWriter;
import java.util.*;
import java.io.*;
import java.sql.Statement;

import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;

public class InventoryManagementSystem {
    public static void main(String[] args) {
        
        
        
        truncateAllTables();
        loadSupplyToDatabase();
        loadDemandToDatabase();
        

        System.out.println("Enter 1 for Supply Details Load from CSV File");
        System.out.println("Enter 2 for Demand Details Load from CSV File");
        System.out.println("Enter 3 for Inventory level for one Product");
        System.out.println("Enter 4 for Generate Inventory level CSV File");
        Scanner sc = new Scanner(System.in);
        int number=0;
        while (true) {
            System.out.println("Please enter a choice (1, 2, 3, 4, or any other value to exit):");
            if (sc.hasNextInt()) {
                number = sc.nextInt();
                switch (number) {
                    case 1:
                        System.out.println("Supply file has been uploaded to database successfully");
                        break;
                    case 2:
                        System.out.println("Demand file has been uploaded to database successfully");
                        loadDemandToDatabase();
                        break;
                    case 4:
                        exportInventoryToCSV();
                        System.out.println("Check the Desktop for the file created");
                        break;
                    case 3:
                        System.out.println("Enter the Product Code for which Inventory Level has to be calculated ");
                        int g = sc.nextInt();
                        System.out.println("Inventory level of the "+g+" is: "+(totalSupply(g)-totalDemand(g)));
                        break;
                    default:
                        System.out.println("Invalid choice. Please select a number between 1 and 4.");
                }
            } else {
                System.out.println("Invalid input. Please enter a valid integer choice.");
                sc.next(); 
            }
            if (number >= 1 && number <= 4) {
                break;
            }
        }
    }
    public static void loadSupplyToDatabase(){
        String csvFilePath = "C:\\Users\\Bhavana\\OneDrive\\Desktop\\Supply.csv";

        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem"; 
        String username = "root"; 
        String password = ""; 

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
             FileReader fileReader = new FileReader(csvFilePath);
             CSVParser csvParser = new CSVParser(fileReader, CSVFormat.DEFAULT.withFirstRecordAsHeader())) {

            String insertQuery = "INSERT INTO supply (Product_Code, Location, Supply_Quantity, Supply_Date) VALUES (?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
                for (CSVRecord csvRecord : csvParser) {
                    preparedStatement.setInt(1, Integer.parseInt(csvRecord.get("Product_Code")));
                    preparedStatement.setString(2, csvRecord.get("Location"));
                    preparedStatement.setInt(3, Integer.parseInt(csvRecord.get("Supply_Quantity")));
                    preparedStatement.setString(4, csvRecord.get("Supply_Date"));

                    preparedStatement.executeUpdate();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static void loadDemandToDatabase(){
        String csvFilePath = "C:\\Users\\Bhavana\\OneDrive\\Desktop\\Demand Details.csv";

        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem"; 
        String username = "root"; 
        String password = ""; 

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
             FileReader fileReader = new FileReader(csvFilePath);
             CSVParser csvParser = new CSVParser(fileReader, CSVFormat.DEFAULT.withFirstRecordAsHeader())) {

            String insertQuery = "INSERT INTO demand (Product_Code, Location, Demand_Quantity, Demand_Date) VALUES (?, ?, ?, ?)";

            try (PreparedStatement preparedStatement = connection.prepareStatement(insertQuery)) {
                for (CSVRecord csvRecord : csvParser) {
                    preparedStatement.setInt(1, Integer.parseInt(csvRecord.get("Product_Code")));
                    preparedStatement.setString(2, csvRecord.get("Location"));
                    preparedStatement.setInt(3, Integer.parseInt(csvRecord.get("Demand_Qty")));
                    preparedStatement.setString(4, csvRecord.get("Demand_Date"));
                    preparedStatement.executeUpdate();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    public static int totalSupply(int product_code){
        
        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem";
        String username = "root"; 
        String password = ""; 

        String category = "";
        int totalSupplyQuantity = 0;

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String selectQuery = "SELECT Product_Category FROM product WHERE Product_Code = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setInt(1, product_code);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        category = resultSet.getString("Product_Category");
                    }
                    
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        if(category.equals("Clothing")){
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                String selectQuery = "SELECT SUM(Supply_Quantity) AS Total_Supply_Quantity FROM supply WHERE Product_Code = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                    preparedStatement.setInt(1, product_code);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            totalSupplyQuantity = resultSet.getInt("Total_Supply_Quantity");
                        }
                        
                    }
                }
            } catch (SQLException e) {
                System.out.println("Product Code Invalid");
//                return 0;
//                e.printStackTrace();
            }
        }
        if(category.equals("Flowers") || category.equals("Furniture")){
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                String selectQuery = "SELECT SUM(Supply_Quantity) AS Total_Supply_Quantity FROM supply WHERE Product_Code = ? AND Location = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                    preparedStatement.setInt(1, product_code);
                    preparedStatement.setString(2, "WareHouse_2234");
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            totalSupplyQuantity = resultSet.getInt("Total_Supply_Quantity");
                        }
                     }
                }
            } catch (SQLException e) {
                System.out.println("Product Code Invalid");
                return 0;
            }
        }
        return totalSupplyQuantity;
    }
    public static int totalDemand(int product_code){
        
        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem";
        String username = "root"; 
        String password = ""; 

        String category = "";
        int totalDemandQuantity = 0;

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String selectQuery = "SELECT Product_Category FROM product WHERE Product_Code = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                preparedStatement.setInt(1, product_code);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        category = resultSet.getString("Product_Category");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        if(category.equals("Clothing")){
            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                String selectQuery = "SELECT SUM(Demand_Quantity) AS Total_Demand_Quantity FROM demand WHERE Product_Code = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                    preparedStatement.setInt(1, product_code);
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            totalDemandQuantity = resultSet.getInt("Total_Demand_Quantity");
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        if(category.equals("Flowers") || category.equals("Furniture")){
            

        

            try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
                String selectQuery = "SELECT SUM(Demand_Quantity) AS Total_Demand_Quantity FROM demand WHERE Product_Code = ? AND Location = ?";
                try (PreparedStatement preparedStatement = connection.prepareStatement(selectQuery)) {
                    preparedStatement.setInt(1, product_code);
                    preparedStatement.setString(2, "WareHouse_2234");
                    try (ResultSet resultSet = preparedStatement.executeQuery()) {
                        if (resultSet.next()) {
                            totalDemandQuantity = resultSet.getInt("Total_Demand_Quantity");
                        }
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        return totalDemandQuantity;
    }
    public static void truncateAllTables() {
        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem"; 
        String username = "username";
        String password = "password"; 

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            truncateTable(connection, "supply");
            truncateTable(connection, "demand");
            truncateTable(connection, "inventory_level");
//            truncateTable(connection, "product");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private static void truncateTable(Connection connection, String tableName) throws SQLException {
        try (Statement statement = connection.createStatement()) {
            String query = "TRUNCATE TABLE " + tableName;
            statement.executeUpdate(query);
            System.out.println("Truncated table: " + tableName);
        }
    }
    
    public static int getInventoryLevel(int productCode){
        return totalSupply(productCode)-totalDemand(productCode);
    }
    
    public static void inventoryLevelsOfProducts() {
        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem";
        String username = "root";
        String password = "";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String selectQuery = "SELECT Product_Code FROM product";
            try (Statement statement = connection.createStatement();
                 ResultSet resultSet = statement.executeQuery(selectQuery)) {

                while (resultSet.next()) {
                    int productCode = resultSet.getInt("Product_Code");
                    int a = getInventoryLevel(productCode);
                    System.out.println(a);
                    
                    try{
                        String q = "INSERT INTO `inventory level` (`Product_code`, `level`) VALUES (?, ?)";
                        PreparedStatement preparedStatement = connection.prepareStatement(q);
                        preparedStatement.setInt(1, productCode);
                        preparedStatement.setInt(2, a);
                        preparedStatement.executeUpdate();
                    }catch(Exception e){
                        System.out.println(e+"Inventory level error");
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    public static void exportInventoryToCSV() {
        String jdbcUrl = "jdbc:mysql://localhost:3306/InventoryManagementSystem";
        String username = "root";
        String password = "";

        try (Connection connection = DriverManager.getConnection(jdbcUrl, username, password)) {
            String selectQuery = "SELECT Product_code, level FROM `inventory level`";
            try (Statement statement = connection.createStatement();
                ResultSet resultSet = statement.executeQuery(selectQuery)) {
                String path = "C:\\Users\\Bhavana\\OneDrive\\Desktop\\inventory.csv";
                try (CSVWriter writer = new CSVWriter(new FileWriter(path))) {
                    String[] headers = {"Product_code", "level"};
                    writer.writeNext(headers);

                    while (resultSet.next()) {
                        String productCode = resultSet.getString("Product_code");
                        String level = resultSet.getString("level");
                        String[] data = {productCode, level};
                        writer.writeNext(data);
                    }
                }
            }
        } catch (SQLException | IOException e) {
            e.printStackTrace();
        }
    }   
}
